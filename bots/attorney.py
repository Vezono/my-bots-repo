import time

import config
from modules.funcs import BotUtil

bot = BotUtil(config.environ['attorney'], config.creator)

from pymongo import MongoClient

db = MongoClient(config.environ['database'])
rooms = db.attorney.rooms
users = db.attorney.users

from telebot import types

jobs = ['attorney', 'prosecutor', 'judge', 'witness', 'attorney helper', 'prosecutor helper']


@bot.message_handler(commands=['start'])
def start_handler(m):
    get_user(m.from_user.id)
    bot.reply_to(m, '–ü—Ä–∏–≤–µ—Ç. –í—ã–±–µ—Ä–∏ —Å–µ–±–µ –∏–º—è –∫–æ–º–∞–Ω–¥–æ–π /name –∏ –∏–¥–∏ –≤ —Å—É–¥ –∫–æ–º–∞–Ω–¥–æ–π /rooms.')


@bot.message_handler(commands=['name'])
def name_handler(m):
    if not m.text.count(' '):
        return
    name = m.text.split(' ', 1)[1]
    if not name.isalpha():
        bot.reply_to(m, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤!')
        return
    user = get_user(m.from_user.id)
    users.update_one(user, {'$set': {'name': name}})
    bot.reply_to(m, '–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–¥—Ç–∏ —Å –Ω–∏–º –≤ –∑–∞–ª —Å—É–¥–∞!')


@bot.message_handler(commands=['rooms'])
def rooms_handler(m):
    user = get_user(m.from_user.id)
    free_rooms = [room for room in rooms.find({'active': False})]
    if not free_rooms:
        add_room()
        free_rooms = [room for room in rooms.find({'active': False})]
    kb = types.InlineKeyboardMarkup()
    for room in free_rooms:
        kb.add(types.InlineKeyboardButton(text=room['name'], callback_data=f'join_room?{room["id"]}'))
    bot.send_message(m.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.', reply_markup=kb)


@bot.message_handler(commands=['profile'])
def profile_handler(m):
    user = get_user(m.from_user.id)
    stats = user["stats"]
    tts = f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å, {m.from_user.first_name}:\n' \
          f'\n' \
          f'–ò–º—è –≤ —Å—É–¥–µ: {user["name"]}\n' \
          f'\n' \
          f'ü•á–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n' \
          f'üõ°–ü–æ–±–µ–¥ –∑–∞ –∞–¥–≤–æ–∫–∞—Ç–∞: {stats["attorney"]}\n' \
          f'üõ°+–ó–∞ –µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞: {stats["attorney helper"]}\n' \
          f'üó°–ü–æ–±–µ–¥ –∑–∞ –ø—Ä–æ–∫—É—Ä–æ—Ä–∞: {stats["prosecutor"]}\n' \
          f'üó°+–ó–∞ –µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞: {stats["prosecutor helper"]}\n' \
          f'üë®üèª‚Äç‚öñÔ∏è–í—ã–Ω–µ—Å–µ–Ω–æ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤ –∑–∞ —Å—É–¥—å—é: {stats["judge"]}\n' \
          f'üë®üèª‚Äç‚öïÔ∏è–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤: {stats["witness"]}\n'
    bot.reply_to(m, tts)


@bot.callback_query_handler(func=lambda c: c.data.split('?')[0] == 'join_room')
def join_room(c):
    user = get_user(c.from_user.id)
    room_id = int(c.data.split('?')[1])
    room = rooms.find_one({'id': room_id})
    users.update_one(user, {'$set': {'room': room_id}})
    if room['name'] == '–ü—É—Å—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞!':
        users.update_one({'id': user['id']}, {'$set': {'status': 'naming_room'}})
        bot.reply_to(c.message, '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–µ—Ä–≤—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏–π—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –µ–π –∏–º—è.')
        return
    users.update_one(user, {'$set': {'status': 'job_selecting'}})
    kb = types.InlineKeyboardMarkup()
    available_jobs = [job for job in rooms.find_one({'id': room_id}) if job in jobs]
    buttons = [types.InlineKeyboardButton(text=job, callback_data=f'set_job?{job}') for job in available_jobs]
    kb.add(*buttons)
    bot.reply_to(c.message, '–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—É–¥–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ —Å—É–¥–µ!', reply_markup=kb)


@bot.callback_query_handler(func=lambda c: c.data.split('?')[0] == 'set_job')
def set_job(c):
    user = get_user(c.from_user.id)
    job = c.data.split('?')[1]
    room = rooms.find_one({'id': user['room']})
    rooms.update_one(room, {'$set': {job: user['id']}})
    users.update_one(user, {'$set': {'status': 'typing'}})
    bot.reply_to(c.message, f'–û—Ç–ª–∏—á–Ω–æ! –í—ã —Ç–µ–ø–µ—Ä—å {job}! –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –≤–∞—Å —É—Å–ª—ã—à–∞—Ç –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å—É–¥–∞.')


@bot.message_handler()
def handler(m):
    user = get_user(m.from_user.id)
    if user['status'] == 'naming_room':
        if not m.text.isalpha():
            bot.reply_to(m, '–ò–º—è –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤!')
            return
        rooms.update_one({'id': user['room']}, {'$set': {'name': m.text}})
        users.update_one(user, {'$set': {'status': 'job_selecting'}})
        kb = types.InlineKeyboardMarkup()
        available_jobs = [job for job in rooms.find_one({'id': user['room']}) if job in jobs]
        buttons = [types.InlineKeyboardButton(text=job, callback_data=job) for job in available_jobs]
        kb.add(*buttons)
        bot.reply_to(m, '–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—É–¥–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ —Å—É–¥–µ!', reply_markup=kb)
    if user['status'] == 'typing':
        if not user['room']:
            return
        room = rooms.find_one({'id': user['room']})
        members = [member for member in [room[job] for job in room if job in jobs] if member != user['id']]
        user_job = [member for member in [room[job] for job in room if job in jobs] if member == user['id']][0]
        tts = f'{user["name"]}[{user_job}]: {m.text}'
        [bot.send_message(member_id, tts) for member_id in members]


def get_user(user_id):
    user = users.find_one({'id': user_id})
    if not user:
        user = {
            'id': user_id,
            'name': None,
            'stats': {job: 0 for job in jobs},
            'room': None,
            'status': None
        }
        users.insert(user)
    return user


def add_room():
    room = {
        'name': '–ü—É—Å—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞!',
        'active': False,
        'id': int(time.time())
    }
    room.update({job: None for job in jobs})
    rooms.insert_one(room)
