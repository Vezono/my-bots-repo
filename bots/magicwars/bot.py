from modules.coach import Coach

coach = Coach()

from telebot import types

import bots.magicwars.battle as game
import bots.magicwars.constants as constants
import config
from modules.funcs import BotUtil

bot = BotUtil(config.environ['magic_wars'], config.creator)
games = {}


@bot.message_handler(commands=['help'])
def help_handler(m):
    tts = '/elements - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n' \
          '/battle - –Ω–∞—á–∞—Ç—å –±–∏—Ç–≤—É –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–≤\n' \
          '/hell - –æ—Ç–∫—Ä—ã—Ç—å –≤—Ä–∞—Ç–∞ –≤ –∞–¥\n' \
          '/dungeon - –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∑–µ–º–µ–ª—å–µ\n\n'
    tts += """–ö–∞—Å—Ç—É–µ—à—å —Ä–µ–ø–ª–∞–µ–º –Ω–∞ –±–æ—Ç–∞ - –∫–∞—Å—Ç—É–µ—à—å –Ω–∞ –º–æ–±–æ–≤
–ö–∞—Å—Ç—É–µ—à—å —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —é–∑–µ—Ä–∞ - –∫–∞—Å—Ç—É–µ—à—å –Ω–∞ –º–∞–≥–∞
–í –∫–∞—Å—Ç–µ —é–∑–∞–µ—à—å –¥–æ —á–µ—Ç—ã—Ä–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–æ)
–ú–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –ª—é–±–æ–º—É –º–æ–±—É –∏–ª–∏ –º–∞–≥—É –∑–∞—â–∏—Ç—É –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∂–∏–∑–Ω–∏, –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–≥–Ω—è)
–ï—Å–ª–∏ –±—É–¥–µ—Ç –∑–∞—â–∏—Ç–∞ –æ—Ç –∂–∏–∑–Ω–∏, —é–∑–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç —Ö–∏–ª–∏—Ç—Å—è"""
    bot.reply_to(m, tts)


@bot.message_handler(commands=['elements'])
def elements_handler(m):
    tts = ", ".join([constants.rus(element) for element in constants.elements])
    bot.reply_to(m, f'–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {tts}')


@bot.message_handler(commands=['hell'])
def hell_handler(m):
    games.update({m.chat.id: game.Hell(m.chat.id)})
    bot.send_message(m.chat.id, '–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≤—Ä–∞—Ç–∞ –≤ –∞–¥!\n/join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.')


@bot.message_handler(commands=['dungeon'])
def dungeon_handler(m):
    games.update({m.chat.id: game.Dungeon(m.chat.id)})
    bot.send_message(m.chat.id, '–ü–æ–¥–∑–µ–º–µ–ª—å–µ –æ—Ç–∫—Ä—ã—Ç–æ!\n/join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.')


@bot.message_handler(commands=['battle'])
def battle_handler(m):
    games.update({m.chat.id: game.Game(m.chat.id)})
    bot.send_message(m.chat.id, '–ù–∞—á–∏–Ω–∞—é –Ω–∞–±–æ—Ä –∫–æ–ª–¥—É–Ω–æ–≤!\n/join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.')


@bot.message_handler(commands=['join'])
def join_handler(m):
    battle = get_game(m.chat.id)
    if not battle:
        bot.reply_to(m, '–ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ —Å –ø–æ–º–æ—â—å—é /battle.')
        return
    if battle.turn:
        return
    magician = game.Magician(battle, m.from_user.id, m.from_user.first_name)
    joined_users = [user.user_id for user in battle.magicians]
    if m.from_user.id in joined_users:
        bot.reply_to(m, '–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å.')
        return
    battle.magicians.append(magician)
    bot.reply_to(m, '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å. /start_game –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.')


@bot.message_handler(commands=['pause'])
def pause_handler(m):
    battle = get_game(m.chat.id)
    if not battle:
        bot.reply_to(m, '–ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ —Å –ø–æ–º–æ—â—å—é /battle.')
        return
    if battle.pause:
        bot.reply_to(m, '–ò–≥—Ä–∞ –∏ —Ç–∞–∫ –Ω–∞ –ø–∞—É–∑–µ. –ù–∞–∂–º–∏—Ç–µ /resume –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.')
        return
    battle.timer.cancel()
    battle.pause = True
    bot.reply_to(m, '–ò–≥—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')


@bot.message_handler(commands=['resume'])
def resume_handler(m):
    battle = get_game(m.chat.id)
    if not battle:
        bot.reply_to(m, '–ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ —Å –ø–æ–º–æ—â—å—é /battle.')
        return
    if not battle.pause:
        bot.reply_to(m, '–ò–≥—Ä–∞ –∏ –Ω–µ —Ç–∞–∫ –Ω–∞ –ø–∞—É–∑–µ. –ù–∞–∂–º–∏—Ç–µ /pause —á—Ç–æ–±—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.')
        return
    battle.pause = False

    battle.next_turn()


@bot.message_handler(commands=['start_game'])
def start_game_handler(m):
    battle = get_game(m.chat.id)
    if not battle:
        bot.reply_to(m, '–ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ —Å –ø–æ–º–æ—â—å—é /battle.')
        return
    if battle.turn:
        return
    if not battle.magicians:
        bot.reply_to(m, '–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤.')
        return
    elif len(battle.magicians) < 2 and battle.type == 'battle':
        battle.magicians.append(game.Magician(game))
    battle.next_turn()


@bot.message_handler()
def cast_handler(m):
    battle = get_game(m.chat.id)
    if not battle:
        return
    if not battle.timer:
        return
    if not m.reply_to_message:
        return
    if m.from_user.id not in [user.user_id for user in battle.magicians]:
        return

    magician = [user for user in battle.magicians if user.user_id == m.from_user.id][0]
    if magician.casted:
        return
    target = game.Magician
    if battle.type == 'battle':
        if m.reply_to_message.from_user.id not in [user.user_id for user in battle.magicians]:
            return
        target = [user for user in battle.magicians if user.user_id == m.reply_to_message.from_user.id][0]
    elif battle.type == 'dungeon':
        if m.reply_to_message.from_user.id == bot.get_me().id:
            kb = types.InlineKeyboardMarkup()
            for mob in battle.mobs:
                kb.add(types.InlineKeyboardButton(f'{mob.name} - üñ§Ô∏è{mob.xp}–•–ü', callback_data=f'attack?{mob.id}'))
            bot.reply_to(m, '–ü–æ –∫–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–∞—Å—Ç–∞–Ω—É—Ç—å?', reply_markup=kb)
            return
        else:
            if m.reply_to_message.from_user.id not in [user.user_id for user in battle.magicians]:
                return
            target = [user for user in battle.magicians if user.user_id == m.reply_to_message.from_user.id][0]

    cast = [m.text.lower()]
    if m.text.count(' '):
        cast = m.text.lower().split(' ')
        for element in cast:
            if not magician.init_element(element) == 'defence':
                continue
            if len(cast) < 2:
                break
            cast.remove(element)
            bot.reply_to(m, magician.defend(target, cast))
            return
    bot.reply_to(m, magician.cast(target, cast))


@bot.callback_query_handler(func=lambda c: c.data.split('?')[0] == 'attack')
def attack_callhadler(c):
    battle = get_game(c.message.chat.id)
    if not battle:
        return
    magician = [user for user in battle.magicians if user.user_id == c.from_user.id][0]
    mob_id = int(c.data.split('?')[1])
    target = [mob for mob in battle.mobs if mob.id == mob_id][0]
    cast_text = c.message.reply_to_message.text
    cast = [cast_text.lower()]
    if cast_text.count(' '):
        cast = cast_text.lower().split(' ')
        for element in cast:
            if not magician.init_element(element) == 'defence':
                continue
            if len(cast) < 2:
                break
            cast.remove(element)
            bot.edit_message(magician.defend(target, cast), c.message.chat.id, c.message.message_id)
            return
    bot.edit_message(magician.cast(target, cast), c.message.chat.id, c.message.message_id)


def get_game(chat_id):
    battle = games.get(chat_id)
    if not battle:
        return
    if not battle.exists:
        return
    return battle


from modules.bot_keeper import keeper

keeper.bots_to_run.update({bot.get_me().first_name: bot})
print(f'{bot.get_me().first_name} booted in {coach.time()}.')
