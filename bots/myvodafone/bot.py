from modules.coach import Coach

coach = Coach()

import telebot
import config
from myvodapi import Session
from .db import Database

db = Database()

token = config.environ['myvodafone']
bot = telebot.TeleBot(token)

waiting_for_code = dict()


@bot.message_handler(commands=['start'])
def start_handler(m):
    bot.reply_to(m, '–ü—Ä–∏–≤–µ—Ç. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –≤–æ–π—Ç–∏ –≤ My Vodafone –±–µ–∑ +380. '
                    '–ü—Ä–∏–º–µ—Ä: \n'
                    '/login 501234567')


@bot.message_handler(commands=['login'])
def login_handler(m):
    print(m.text)
    if m.text.count(' ') != 1:
        bot.reply_to(m, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.')
        return
    number = m.text.split()[1]
    if len(number) != 9:
        bot.reply_to(m, '–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞. –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥ - 501234567, –±–µ–∑ +380.')
        return
    session = Session()
    try:
        tempToken = session.callSmsWithTempToken(number)
    except:
        bot.reply_to(m, '–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    waiting_for_code.update({m.from_user.id: {'number': number, 'tempToken': tempToken}})
    print(waiting_for_code)
    bot.reply_to(m, '–í–∞–º –∏–¥–µ—Ç —Å–º—Å. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: \n/code 1234')


@bot.message_handler(commands=['code'])
def code_handler(m):
    print(m.text)
    if m.text.count(' ') != 1:
        bot.reply_to(m, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.')
        return
    code = m.text.split()[1]
    if len(code) != 4:
        bot.reply_to(m, '–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞. –û–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥ - 1234, —Å —á–µ—Ç—ã—Ä—å–º—è –∑–Ω–∞–∫–∞–º–∏.')
        return
    if m.from_user.id not in waiting_for_code:
        bot.reply_to(m, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /login.')
        return
    session = Session()
    user = waiting_for_code[m.from_user.id]
    try:
        access_token = session.enterCodeAndGetAccessToken(user['number'], code, user['tempToken'])
    except:
        bot.reply_to(m, '–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–ª–æ–≥–∏–Ω—Ç–µ—Å—å.')
        return
    print(access_token)
    db.create_user(m.from_user.id, access_token)
    bot.reply_to(m, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ /info.')


@bot.message_handler(commands=['info'])
def info_handler(m):
    try:
        tts = form_information(m.from_user.id)
    except Exception as e:
        print(e)
        bot.reply_to(m, '–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞. –ø–µ—Ä–µ–ª–æ–≥–∏–Ω—Ç–µ—Å—å.')
        return
    bot.reply_to(m, tts, parse_mode="HTML")


def form_information(user_id):
    session = Session()
    session.token = db.get_user(user_id)['token']
    tts = ''
    bonuses = session.getBonus()['getBonus']['values']['balance']
    counters = session.getCallsAndSmsCounters()['countersMainV2']['values']
    balance = counters['balance']
    credit_balance = counters['ama']['balance']
    tts += f'üí∞–ë–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω.\n' \
           f'üéñ–ë–æ–Ω—É—Å—ã: {bonuses} —à—Ç.\n' \
           f'üí≥–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å—á–µ—Ç: {credit_balance} –≥—Ä–Ω.\n\n' \
           f'<b>‚òéÔ∏è–î–∞–Ω–Ω—ã–µ –æ –°–ú–° –∏ –ó–≤–æ–Ω–∫–∞—Ö:</b>'
    sms = counters['counters']
    for counter in counters['counters']:
        tts += f'\n{counter["nameShort"]} - {counter["remainValue"]} —à—Ç. –æ—Å—Ç–∞–ª–æ—Å—å;'
    internet_counters = session.getInternetCounters()['countersMainDPIv3']['values']
    tts += '\n\n<b>üåê–î–∞–Ω–Ω—ã–µ –æ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:</b>'
    for counter in internet_counters['counters']:
        tts += f'\n{counter["name"]} - {counter["remainValue"]} {counter["unit"]} –æ—Å—Ç–∞–ª–æ—Å—å;'
    plan_info = session.getCurrentPlan()['currentPlan']['values']
    tts += f'\n\n{plan_info["name"]} - {plan_info["desc"]}. –¶–µ–Ω–∞ - {plan_info["regularCost"]} –≥—Ä–Ω –∑–∞ –ø–∞–∫–µ—Ç.'
    return tts


from modules.bot_keeper import keeper

keeper.bots_to_run.update({bot.get_me().first_name: bot})
print(f'{bot.get_me().first_name} booted in {coach.time()}.')
